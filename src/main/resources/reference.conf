lucenerdd {

  // Name of analyzer as it is under Lucene's package org.apache.lucene.analysis.XX
  analyzer.name = "en"
  analyzer.name=${?LUCENERDD_ANALYZER_NAME}

  
  // Similarity scoring for Lucenes
  similarity.name = "bm25" // anything else will default to Lucene classic similarity
  similarity.name = ${?LUCENERDD_SIMILARITY_NAME}

  // Supported linkage methods
  // "collectbroadcast" : Collects the RDD that contains the queries (to be used only if query RDD
  // fits in spark driver's memory)
  //
  // "cartesian" : Uses cartesian product between the partitions of the queries RDD and the partitions
  // of LuceneRDD. Note it duplicates each partition of LuceneRDD n times where n is the number of
  // partitions of the queries RDD.
  linker.method = "collectbroadcast"
  linker.method = ${?LUCENERDD_LINKER_METHOD}

  index {

    // Lucene index storage
    // Use 'disk' to store the index in Java's temp directory
    // Otherwise the index will be stored in memory
    // Do not use memory, see http://lucene.apache.org/core/7_5_0/core/org/apache/lucene/store/RAMDirectory.html
    store.mode = "disk"
    store.mode = ${?LUCENERDD_INDEX_STORE_MODE}

    stringfields{

      // Analyze string fields by default or not
      // Implicit fields, like _1, _2, etc will use this option
      analyzed = true
      analyzed = ${?LUCENERDD_INDEX_STRINGFIELDS_ANALYZED}

      // Select a subset of string fields that you do not wish to be analyzed
      // Due to serialization issues this list should be set before starting a Spark Session
      // Moreover, all text/string fields that end with '_notanalyzed' are not analyzed
      not_analyzed_list = []
      not_analyzed_list = ${?LUCENERDD_INDEX_STRINGFIELDS_NOT_ANALYZED_LIST}

      // Text fields options as in org.apache.lucene.index.IndexOptions
      //
      // Other options are:
      // "DOCS"
      // "DOCS_AND_FREQS"
      // "DOCS_AND_FREQS_AND_POSITIONS"
      // "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS"
      // "NONE"
      options = "docs_and_freqs_and_positions_and_offsets"
      options = ${?LUCENERDD_INDEX_STRINGFIELDS_OPTIONS}

      terms {
        // Omit terms norms
        omitnorms = false
        omitnorms = ${?LUCENERDD_INDEX_STRINGFIELDS_TERMS_OMITNORMS}

        // Store term positions
        positions = false
        positions = ${?LUCENERDD_INDEX_STRINGFIELDS_TERMS_POSITIONS}

        // Store Term vectors (set true, otherwise LuceneRDD.termVectors(fieldName) will fail)
        vectors = true
        vectors = ${?LUCENERDD_INDEX_STRINGFIELDS_TERMS_VECTORS}
      }
    }
  }

  query {
    // Maximum value on topK queries
    topk.maxvalue = 100
    topk.maxvalue = ${?LUCENERDD_QUERY_TOPK_MAXVALUE}

    // Default value of number of returned results
    topk.default = 10
    topk.default = ${?LUCENERDD_QUERY_TOPK_DEFAULT}

    // Default value of number of faceted results
    facets.number.default = 10
    facets.number.default = ${?LUCENERDD_QUERY_FACETS_NUMBER_DEFAULT}

  }

  // Spatial related configurations used by ShapeLuceneRDD
  spatial {
    prefixtree {

      // Spatial tree data structure
      name = "quad"  // "geohash" or "quad"
      name = ${?LUCENE_SPATIAL_PREFIXTREE_NAME}

      maxlevel = 9 // 11 results in sub-meter precision for geohash
      maxlevel = ${?LUCENE_SPATIAL_PREFIXTREE_MAXLEVEL}


      maxDistErr = 5.0 // in kilometers
      maxDistErr = ${?LUCENE_SPATIAL_PREFIXTREE_MAXDISTERR}

    }

    // Shape format can be one of ShapeIO.GeoJSON, ShapeIO.LEGACY, ShapeIO.POLY, ShapeIO.WKT
    shape.io.format = "WKT"
    shape.io.format = ${?LUCENE_SPATIAL_SHAPE_IO_FORMAT}

    // Supported linkage methods
    // "collectbroadcast" : Collects the RDD that contains the queries (to be used only if query RDD
    // fits in spark driver's memory)
    //
    // "cartesian" : Uses cartesian product between the partitions of the queries RDD and the partitions
    // of LuceneRDD. Note it duplicates each partition of LuceneRDD n times where n is the number of
    // partitions of the queries RDD.
    linker.method = "collectbroadcast"
    linker.method = ${?LUCENE_SPATIAL_LINKER_METHOD}
  }
}
